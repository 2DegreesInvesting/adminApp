devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
?shiny::br
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
run_app()
devtools::load_all(".")
run_app()
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goButton", "Go!", class = "btn-success"),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goButton. This will run once initially,
# because the value changes from NULL to 0.
input$goButton
# Use isolate() to avoid dependency on input$obs
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
shinyApp(ui, server)
}
## Example of adding extra class values
actionButton("largeButton", "Large Primary Button", class = "btn-primary btn-lg")
actionLink("infoLink", "Information Link", class = "btn-info")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
lubridate::as_date("2021-05-28")
lubridate::as_date(c("2021-05-28", "2021-06-26"))
diff(lubridate::as_date(c("2021-05-28", "2021-06-26")))
diff(lubridate::as_date(c("2021-05-28", "2021-06-27")))
weekdays(diff(lubridate::as_date(c("2021-05-28", "2021-06-27"))))
days <- lubridate::as_date(c("2021-05-28", "2021-06-27")
days
dates <- lubridate::as_date(c("2021-05-28", "2021-06-27"))
dates
lubridate::wday(dates)
seq(dates)
seq(dates)
first <- lubridate::as_date("2021-05-28")
last <- lubridate::as_date("2021-05-28")
lubridate::wday(dates)
seq(first, last)
seq(first, last, 1)
days <- seq(first, last, "days")
days
weekdays(days)
!weekdays(days)
days <- seq(first, last, "days")
first <- as.Date("2021-05-28")
last <- as.Date("2021-05-28")
days <- seq(first, last, "days")
days
sum(!weekdays(days) %in% c("Saturday", "Sunday"))
startDate <- dmy("21-May-2015")
endDate <- dmy("19-Aug-2015")
library(lubridate)
startDate <- dmy("21-May-2015")
endDate <- dmy("19-Aug-2015")
myDates <-seq(from = startDate, to = endDate, by = "days")
length(which(wday(myDates)==2))
startDate
endDate
myDates
seq(from = startDate, to = endDate, by = "weeks")
startDate <- dmy("21-May-2015")
endDate <- dmy("19-Aug-2015")
myDates <-seq(from = startDate, to = endDate, by = "days")
startDate
endDate
first <- as.Date("2021-05-28")
last <- as.Date("2021-06-27")
days <- seq(first, last, "days")
sum(!weekdays(days) %in% c("Saturday", "Sunday"))
daily_rate <- $410
daily_rate <- 410
daily_rate <- 410
first <- as.Date("2021-05-28")
last <- as.Date("2021-06-27")
days <- seq(first, last, "days")
sum(!weekdays(days) %in% c("Saturday", "Sunday"))
n * daily_rate
daily_rate <- 410
first <- as.Date("2021-05-28")
last <- as.Date("2021-06-27")
days <- seq(first, last, "days")
n <- sum(!weekdays(days) %in% c("Saturday", "Sunday"))
n * daily_rate
daily_rate <- 410
daily_rate <- 410
first <- as.Date("2021-05-28")
last <- as.Date("2021-06-27")
days <- seq(first, last, "days")
days
dates <- seq(first, last, "days")
weekdates <- !weekdays(dates) %in% c("Saturday", "Sunday")
weekdates
is_wday <- !weekdays(dates) %in% c("Saturday", "Sunday")
is_wday
sum(is_wday)
n <- sum(is_wday)
total_amount <- amount_of_days * price_per_day
price_per_day <- 410
first <- as.Date("2021-05-28")
last <- as.Date("2021-06-27")
dates <- seq(first, last, "days")
is_wday <- !weekdays(dates) %in% c("Saturday", "Sunday")
amount_of_days <- sum(is_wday)
total_amount <- amount_of_days * price_per_day
total_amount
library(lubridate)
startDate <- dmy("2021-05-28")
endDate <- dmy("2021-06-27")
myDates <-seq(from = startDate, to = endDate, by = "days")
myDates
length(which(wday(myDates)==2))
wday(myDates)
wday(myDates) %in% c(1, 2)
wday(myDates, label = TRUE)
wday(myDates, label = TRUE) %in% 2:6
wday
lubridate::wday()
?lubridate::wday()
wday(today())
wday(today(), label = TRUE)
wday(today()-5, label = TRUE)
wday(today()-4, label = TRUE)
wday(today()-4)
wday(myDates, label = TRUE) %in% 2:6
mon_fri <- 2:6
wday(myDates, label = TRUE) %in% mon_fri
wday(myDates, label = TRUE, week_start = "Sunday") %in% mon_fri
mon_fri <- 2:6
wday(myDates, label = TRUE, week_start = "Sunday") %in% mon_fri
getOption("lubridate.week.start")
sunday <- 1L
wday(myDates, label = TRUE, week_start = sunday) %in% mon_fri
wday(today()-4, label = TRUE, week_start = 1)
wday(today(), label = TRUE, week_start = 1)
wday(today(), label = TRUE, week_start = 2)
wday(today(), week_start = 2)
wday(today(), week_start = 1)
sunday_iso <- 1L
mon_fri <- 2:6
sun_iso <- 1L
mon_fri <- 2:6
sun_iso <- 1L
mon_fri <- 2L:6L
wday(myDates, label = TRUE, week_start = sunday_iso) %in% mon_fri
is_wday <- wday(myDates, label = TRUE, week_start = sunday_iso) %in% mon_fri
is_wday
sum(is_wday)
sum(is_wday)
length(is_wday)
startDate <- dmy("2021-05-28")
endDate <- dmy("2021-06-27")
myDates <-seq(from = startDate, to = endDate, by = "days")
which(wday(myDates)==2)
is_wday
is_wday
sun_iso <- 1L
mon_fri <- 2L:6L
is_wday <- wday(myDates, label = TRUE, week_start = sunday_iso) %in% mon_fri
is_wday
sum(is_wday)
is_wday
myDates
sun_iso <- 1
mon_fri <- 2:6
is_wday <- wday(myDates, label = TRUE, week_start = sunday_iso) %in% mon_fri
sum(is_wday)
startDate <- dmy("2021-05-28")
endDate <- dmy("2021-06-27")
myDates <-seq(from = startDate, to = endDate, by = "days")
length(which(wday(myDates)==2))
startDate <- dmy("2021-05-28")
endDate <- dmy("2021-06-27")
myDates <-seq(from = startDate, to = endDate, by = "days")
startDate <- dmy("2021-05-28")
library(lubridate)
startDate <- dmy("2021-05-28")
endDate <- dmy("2021-06-27")
library(lubridate)
startDate <- dmy("2021-05-28")
is_wday(first, last)
weekdays_between <- function(first, last) {
dates <- seq(as.Date(first), as.Date(last), "days")
!weekdays(dates) %in% c("Saturday", "Sunday")
}
weekdays_between(first, last)
first <- as.Date("2021-05-28")
last <- as.Date("2021-06-27")
weekdays_between(first, last)
amount_of_days <- sum(weekdays_between(first, last))
amount_of_days
total_pay("2021-05-28", "2021-06-27")
first <- "2021-05-28"
last <- "2021-06-27"
total_pay("2021-05-28", "2021-06-27")
total_pay <- function(first, last, daily_pay) {
n_wdays <- sum(wdays_between(first, last))
n_wdays * daily_pay
}
wdays_between <- function(first, last) {
dates <- seq(as.Date(first), as.Date(last), "days")
!weekdays(dates) %in% c("Saturday", "Sunday")
}
first <- "2021-05-28"
last <- "2021-06-27"
total_pay("2021-05-28", "2021-06-27")
total_pay("2021-05-28", "2021-06-27", daily_pay = 410)
#' Title
#'
#' @param first
#' @param last
#' @param price_per_day
#'
#' @return
#' @export
#'
#' @examples
#' first <- "2021-05-28"
#' last <- "2021-06-27"
#' total_pay(first = "2021-05-28", last = "2021-06-27", daily = 410)
total_pay <- function(first, last, daily) {
n_wdays <- sum(wdays_between(first, last))
n_wdays * daily
}
wdays_between <- function(first, last) {
dates <- seq(as.Date(first), as.Date(last), "days")
!weekdays(dates) %in% c("Saturday", "Sunday")
}
use_r("pay_between")
devtools::load_all(".")
pay_between(first = "2021-05-28", last = "2021-06-27", daily = 410)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?shiny::tabsetPanel()
styler:::style_active_file()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
use_r("tabPanelCalculate")
styler:::style_active_file()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
use_r("tabPanelInfo")
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
run_app()
info <- c(
"Contractors submit monthly invoices in which the amount of days of service",
"equal the number of weekdays within the invoice period, irrespective of",
"holidays or vacation days spent. For example, the first invoice covered the",
"time range from April 28th to May 27th, resulting in 22 work days to charge",
"for."
)
paste(info)
info <- paste(
"Contractors submit monthly invoices in which the amount of days of service",
"equal the number of weekdays within the invoice period, irrespective of",
"holidays or vacation days spent. For example, the first invoice covered the",
"time range from April 28th to May 27th, resulting in 22 work days to charge",
"for."
)
info
p(info)
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
?shiny::p()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
use_r("billing")
use_r("timesheet")
use_package("glue")
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput("percents", "Create a list of percents per grant")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
devtools::load_all(".")
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents",
"List percent time allocation per grant (e.g. for Mauro's Q2 and Q3)",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents",
"List percent time allocation per grant (e.g. for Mauro's Q2 and Q3)",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n
}
shinyApp(ui, server)
?numericInput
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
numericInput("obs", "Observations:", 10, min = 1, max = 100),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$obs })
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
numericInput("obs", "Observations:", 10),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$obs })
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
numericInput("obs", "Observations:", 10),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$obs })
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
numericInput("obs", "Observations:"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$obs })
}
shinyApp(ui, server)
}
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Number of days", 21),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderText({
percent_to_n(input$percents, input$total)
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Number of days", 21),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderText({
percent_to_n(input$percents, input$total)
})
}
shinyApp(ui, server)
deparse("list(1)")
eval(deparse("list(1)"))
eval(deparse1("list(1)"))
?deparse()
eval(expression("list(1)"))
expression("list(1)")
eval("list(1)")
rlang::expr("list(1)")
eval(parse("list(1)"))
parse("list(1)")
list(1)
eval(parse(text = "list(1)"))
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Number of days", 21),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderText({
percents <- eval(parse(text = input$percents))
percent_to_n(percents, input$total)
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Number of days", 21),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
percent_to_n(percents, input$total)
})
}
shinyApp(ui, server)
runApp('R/timesheet.R')
devtools::load_all(".")
devtools::load_all(".")
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Number of days", 21),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Number of days to fill the timesheet", 21),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
runApp('R/timesheet.R')
runApp('R/timesheet.R')
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
# if (sum(percents) != 100) {
#   stop(
#     sprintf("Percent time allocation must sum 100% not %s", sum(percents)),
#     call. = FALSE
#   )
# }
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
sum_pcnt <- Reduce(sum, percents)
if (sum_pcnt != 100) {
stop(
sprintf("Percent time allocation must sum 100% not %s", sum_pcnt),
call. = FALSE
)
}
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
print(source('R/timesheet.R')$value)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
sum_pcnt <- Reduce(sum, percents)
if (sum_pcnt != 100) {
stop("Time allocation must sum 100%, not ", sum_pcnt, call. = FALSE)
}
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
sum_pcnt <- Reduce(sum, percents)
if (sum_pcnt != 100) {
stop("Time allocation must sum 100%, not ", sum_pcnt, call. = FALSE)
}
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
devtools::load_all(".")
devtools::load_all(".")
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
stop(
"Percent time allocation must sum 100%, not ", sum_pcnt,
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
msg <- sprintf("Percent time allocation must sum 100%, not %s.", sum_pcnt)
stop(
msg,
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
sprintf("lala %s", 1)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
msg <- sprintf("Percent time allocation must sum 100%, not %s.", unlist(sum_pcnt))
stop(
msg,
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
msg <- sprintf("Percent time allocation must sum 100%, not %f.", sum_pcnt)
stop(
msg,
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
msg <- sprintf("Percent time allocation must sum 100%, not %f.", sum_pcnt)
stop(
msg,
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
msg <- sprintf("Percent time allocation must sum 100%, not %f.", sum_pcnt)
stop(
msg,
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
msg <- sprintf("Percent time allocation must sum 100%, not %s.", as.character(sum_pcnt))
stop(
msg,
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
msg <- sprintf("Percent time allocation must sum 100%, not %s.", as.character(sum_pcnt))
stop(
msg,
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
msg <- sprintf("Percent time allocation must sum 100%, not %s.", as.character(sum_pcnt))
stop(
msg,
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
stop(
"Percent time allocation must sum 100%, not ", sum_pcnt, ".",
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
# Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
# # Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
# mauro_q3_q4 <- list(iki_pacta = 17, iki_impact = 80, ecf = 3)
# percent_to_n(mauro_q3_q4, total = 50)
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant",
value = "list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
stop(
"Percent time allocation must sum 100%, not ", sum_pcnt, ".",
call. = FALSE
)
}
}
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
inform_quarters <- function() {
"Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec."
}
percent_to_n <- function(percents, total) {
lapply(percents, function(x) x * total / 100)
}
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
stop(
"Percent time allocation must sum 100%, not ", sum_pcnt, ".",
call. = FALSE
)
}
invisible(x)
}
# Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
allocation_demo <- function() {
"list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
}
ui <- fluidPage(
textInput(
"percents", "Percent time allocation per grant", value = allocation_demo()
),
numericInput("total", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$total))
})
}
shinyApp(ui, server)
inform_quarters <- function() {
"Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec."
}
percent_to_n <- function(percents, n_days) {
lapply(percents, function(x) x * n_days / 100)
}
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
stop(
"Percent time allocation must sum 100%, not ", sum_pcnt, ".",
call. = FALSE
)
}
invisible(x)
}
# Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
allocation_demo <- function() {
"list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
}
ui <- fluidPage(
textInput(
"percents", "Time allocation per grant (%)", value = allocation_demo()
),
numericInput("n_days", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$n_days))
})
}
shinyApp(ui, server)
inform_quarters <- function() {
"Quarters: 1) Jan-Mar; 2) Apr-Jun; 3) Jul-Sep; 4) Oct-Dec."
}
percent_to_n <- function(percents, n_days) {
lapply(percents, function(x) x * n_days / 100)
}
abort_if_time_allocation_isnt_100 <- function(x) {
sum_pcnt <- Reduce(sum, x)
if (sum_pcnt != 100) {
stop(
"Percent time allocation must sum 100%, not ", sum_pcnt, ".",
call. = FALSE
)
}
invisible(x)
}
# Jul 13, 2021 at 8:03 AM Léonie Ségala <leonie@2degrees-investing.org>
allocation_demo <- function() {
"list(iki_pacta = 17, iki_impact = 80, ecf = 3)"
}
ui <- fluidPage(
textInput(
"percents", "Time allocation per grant (%)", value = allocation_demo()
),
numericInput("n_days", "Days to fill in the timesheet", 20),
strong("Days to allocate to each grant"),
verbatimTextOutput("n")
)
server <- function(input, output, session) {
output$n <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$n_days))
})
}
shinyApp(ui, server)
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
#' litigationRisk app
#'
#' @return Called for its side effect.
#' @export
#'
#' @examples
#' if (interactive()) {
#'   run_app()
#' }
run_app <- function() {
ui <- fluidPage(
tabsetPanel(
id = "tabs",
tabPanel("Invoice", sidebarPanel(p(invoiceInfo())), invoice()),
tabPanel("Timesheet", timesheet())
))
server <- function(input, output, session) {
# Invoice
n_days <- reactive(count_workdays(input$range[[1]], input$range[[2]]))
output$count <- renderText(n_days())
output$charge <- renderText(n_days() * input$daily_rate)
# Timesheet
output$days_per_grant <- renderPrint({
percents <- eval(parse(text = input$percents))
abort_if_time_allocation_isnt_100(percents)
unlist(percent_to_n(percents, input$days_to_fill))
})
}
shinyApp(ui, server)
}
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
verticalLayout {shiny}	R Documentation
Lay out UI elements vertically
Description
Create a container that includes one or more rows of content (each element passed to the container will appear on it's own line in the UI)
Usage
verticalLayout(..., fluid = TRUE)
Arguments
...
Elements to include within the container
fluid
TRUE to use fluid layout; FALSE to use fixed layout.
See Also
Other layout functions: fillPage(), fixedPage(), flowLayout(), fluidPage(), navbarPage(), sidebarLayout(), splitLayout()
Examples
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
verticalLayout(
a(href="http://example.com/link1", "Link One"),
a(href="http://example.com/link2", "Link Two"),
a(href="http://example.com/link3", "Link Three")
)
)
shinyApp(ui, server = function(input, output) { })
}
[Package shiny version 1.6.0 Index]
devtools::load_all(".")
run_app()
use_package("glue")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
p("
Quarters:
1) Jan-Mar.
2) Apr-Jun.
3) Jul-Sep.
4) Oct-Dec.
")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
reactlog::reactlog_enable()
devtools::load_all(".")
run_app()
use_build_ignore("app.R")
use_build_ignore("rstudioconnect")
use_build_ignore("rsconnect")
tools::toTitleCase("Help with Administration Tasks")
tolower("Help with Administration Tasks")
devtools::load_all(".")
